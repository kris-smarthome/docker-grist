services:
  grist:
    image: gristlabs/grist:latest
    container_name: grist
    restart: unless-stopped
    environment:
      GRIST_DEFAULT_EMAIL: ${GRIST_DEFAULT_EMAIL}
      GRIST_SINGLE_ORG: ${GRIST_SINGLE_ORG}
      GRIST_SANDBOX_FLAVOR: gvisor
      GRIST_DOMAIN: ${GRIST_DOMAIN}
      APP_HOME_URL: https://${HTTPS_DOMAIN}
      APP_DOC_URL: https://${HTTPS_DOMAIN}
      APP_DOC_INTERNAL_URL: http://localhost:8484

      # Postgres database setup
      TYPEORM_DATABASE: grist
      TYPEORM_USERNAME: grist
      TYPEORM_HOST: grist-postgres
      TYPEORM_LOGGING: false
      TYPEORM_PASSWORD: ${DATABASE_PASSWORD}
      TYPEORM_PORT: 5432
      TYPEORM_TYPE: postgres

      # Redis setup
      REDIS_URL: redis://grist-redis

      # MinIO setup. This requires the bucket set up on the MinIO instance with versioning enabled.
      GRIST_DOCS_MINIO_ACCESS_KEY: grist
      GRIST_DOCS_MINIO_SECRET_KEY: ${MINIO_PASSWORD}
      GRIST_DOCS_MINIO_USE_SSL: 0
      GRIST_DOCS_MINIO_BUCKET: grist-docs
      GRIST_DOCS_MINIO_ENDPOINT: grist-minio
      GRIST_DOCS_MINIO_PORT: 9000
    security_opt:
      - "no-new-privileges:true"
    volumes:
      # Where to store persistent data, such as documents.
      - grist:/persist
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grist.rule=Host(`${HTTPS_DOMAIN}`)"
      - "traefik.http.routers.grist.entrypoints=websecure"
      - "traefik.http.routers.grist.tls.certresolver=letsencrypt"
      - "traefik.http.services.grist.loadbalancer.server.port=8484"
    #ports:
    #  - 8484:8484
    depends_on:
      - grist-postgres
      - grist-redis
      - grist-minio
    #  - minio-setup
    networks:
      - grist
      - traefik

  grist-postgres:
    image: postgres:alpine
    container_name: grist-postgres
    restart: unless-stopped
    security_opt:
      - "no-new-privileges:true"
    environment:
        POSTGRES_DB: grist
        POSTGRES_USER: grist
        POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - grist-postgres:/var/lib/postgresql/data
    networks:
      - grist

  grist-redis:
    image: redis:alpine
    container_name: grist-redis
    restart: unless-stopped
    security_opt:
      - "no-new-privileges:true"
    volumes:
      - grist-redis:/data
    networks:
      - grist

  grist-minio:
    image: minio/minio:latest
    container_name: grist-minio
    restart: unless-stopped
    security_opt:
      - "no-new-privileges:true"
    environment:
      MINIO_ROOT_USER: grist
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - grist-minio:/data
    command:
      server /data --console-address=":9001"
    networks:
      - grist

  # This sets up the buckets required in MinIO. It is only needed to make this example work.
  # It isn't necessary for deployment and can be safely removed.
  #minio-setup:
  #  image: minio/mc
  #  environment:
  #    MINIO_PASSWORD: ${MINIO_PASSWORD}
  #  depends_on:
  #    grist-minio:
  #      condition: service_started
  #  restart: on-failure
  #  entrypoint: >
  #    /bin/sh -c "
  #    /usr/bin/mc alias set myminio http://grist-minio:9000 grist '$MINIO_PASSWORD';
  #    /usr/bin/mc mb myminio/grist-docs;
  #    /usr/bin/mc anonymous set public myminio/grist-docs;
  #    /usr/bin/mc version enable myminio/grist-docs;"
  #  networks:
  #    - grist
  
networks:
  grist:
    name: "grist"
    driver: bridge
  traefik:
    name: "traefik"
    external: true

volumes:
  grist:
    driver: local
  grist-postgres:
    driver: local
  grist-redis:
    driver: local
  grist-minio:
    driver: local 